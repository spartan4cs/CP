                              True-Template
                              Версия 3.0.1.11
                  ┌─────────────────────────────────────╖
                  │ Написано на основе исходных текстов ║
                  │  True-Cpp.Dll (c) Andrey Tretjakov  ║
                  │     публикуется с его согласия      ║
                  │     Оригинальная версия написана    ║
                  │         Александром Назаренко       ║
                  ╘═════════════════════════════════════╝

     This  software  uses  syntax  coloring/regexp  codes  by  Cail Lomecb
<ruiv@uic.nnov.ru>, http://www.uic.nnov.ru/~ruiv/

           Плагин для поддержки сокращенного ввода структурных
                  конструкций языков программирования
                        во встроенном редакторе
           файлового менеджера FAR (C) 1996-2000 Eugene Roshal,
                   Copyright (C) 2000-2014 FAR Group

      ( Плагин предназначен для FAR manager, 3.0 build 4040 как минимум )

             ┌──────────────────────────────────────────────┐
             │           1. Назначение плагина              │
             └──────────────────────────────────────────────┘

    Этот  плагин предназначен для поддержки сокращенного ввода структурных
конструкций  языков  программирования  и  "интеллектуальных" отступов, как
в  популярном  редакторе  Multi  Edit.  Плагин  может  быть  использован и
не   программистами  для  быстрого  ввода  часто  используемых  фрагментов
текста.

    В текущей версии реализовано:

 -  Интеллектуальные отступы (Smart indent)
    Попытка  нажать  "Enter"  в строке, совпадающей с одной из описанных в
    файле   конфигурации  приведет  к  тому,  что  курсор  отодвинется  на
    указанное  число  табуляций (вперед или назад) и/или сама строка будет
    смещена на указанную позицию.
 -  Немедленный отступ (Immediate indent)
    Работает  аналогично  Smart  indent,  но  не  требует нажатия "Enter",
    срабатывая при вводе указанной строки. Удобно для операторных скобок.
 -  Сокращенный ввод (Template expand)
    Это  сложно  описать, но почувствовать просто :) Наберите в файле *.c,
    *.h,  *.cpp  (в  конце  строки)  i, нажмите пробел и возникнет готовая
    конструкция (точка отмечает положение курсора).

    if ( . )
    {
    }

    Или  более "навороченный" макрос, при вводе "clas " развернётся окошко
с запросом имени класса и будет построено описание класса в виде:

    class TMyClass
    {
      public:
        TMyClass();
        ~TMyClass();
      private:
    }

    Кроме такого "традиционного" использования плагин  можно  использовать
для создания клавиатурных макросов, срабатывающих только для определённого
типа файлов и в определённой  позиции в строке.  Клавиша активации шаблона
может быть задана произвольно в диалоге настройки плагина.
    Кроме этого  возможно  создание  макросов,  выполняемых  при  создании
в редакторе нового файла (Create by template).

 -  Многоязыковая поддержка
    Набор  правил  отступа  и  темплэйтов  может варьироваться для каждого
    типа  файлов  (по  имени файла).  Можно (да и нужно) иметь независимые
    правила для C/C++, Pascal, HTML и т.д.

 -  Принудительная смена набора правил отступа и темплэйтов
    При вызове из меню плагинов редактора  плагин позволит вручную выбрать
    набор правил отступа и темплэйтов или запретить  свою работу для этого
    файла.

 -  Внешние команды
    Выполнение   внешней  команды   для   редактируемого  файла.  Например
    компиляция исходного текста программы или проверка орфографии в файле.

 -  Работа в панелях
    Возможность замены  файловых ассоциаций FAR  набором  внешних  команд,
    определенных для данного  типа файлов. Для вызова меню внешних команд
    из файловых панелей достаточно определить ассоциацию "tpl:!\!.!".

 -  Работа в панелях (форматирование)
    Возможность замены  файловых ассоциаций FAR  набором  внешних  команд,
    определенных для данного  типа файлов. Для форматирования из файловых
    панелей достаточно определить ассоциацию "tpf:!\!.!".

 -  Запрет работы
    Работа плагина может быть  отключена  в его настройках либо постоянно,
    либо временно по нажатию клавиши ScrollLock.

    Примечание:

 -  Плагин рассчитан на то, что в редакторе стоит auto indent.
 -  Может странно работать  при  сохранении  символа  Tab,  а  не пробелов
    вместо него.

             ┌──────────────────────────────────────────────┐
             │       2. Комплект поставки и инсталляция     │
             └──────────────────────────────────────────────┘

    true-tpl.dll      - Собственно плагин
    true-tpl-eng.lng  - Файл сообщений (English)
    true-tpl-rus.lng  - Файл сообщений (Русский)
    true-tpl.txt      - Этот текст
    true-tpl.xml      - Основной файл описания правил отступа и темплэйтов
    Ini\true-*.xml    - Подключаемые файлы описаний
    Source\*.*        - Исходные тексты (не нужны - сотрите)

    Как  инсталлировать  плагины знаете? Значит я не буду рассказывать :->
Создайте каталог  "C:\Program Files\Far\Plugins\Editor\TrueTPL"  или любой
другой в каталоге  плагинов,  скопируйте в него содержимое и перезапустите
FAR. Должно заработать :)

             ┌──────────────────────────────────────────────┐
             │ 3. Файл описания правил отступа и темплэйтов │
             └──────────────────────────────────────────────┘

    Эта часть самая "веселая",  потому  что  синтаксис  файла конфигурации
достаточно   "навороченный".   Если   слова   "регулярное   выражение"   и
"операторные  скобки"  вам  ничего  не  говорят, то лучше просто не читать
этот раздел, а разбираться на поставляемых примерах.
    В   файле  конфигурации  плагина  (true-tpl.xml)  допустимы такие типы
описаний: описание языка (Language), отступа (Indent), темплэйта (Expand),
комментария (Comment), операторных скобок (Bracket),  включения (Include),
описания компилятора <Compiler> и внешней команды <Exec>.
    Все описания должны быть заключены в блок <TrueTpl> ... </TrueTpl>.
Все описания имеют похожий синтаксис, подобный синтаксису XML:

    <Tag [subtag1=value1] [subtag2=value2] ... [subtagN=valueN]>
      ...
    </Tag>

    Или

    <Tag [subtag1=value1] [subtag2=value2] ... [subtagN=valueN]/>

    Tag    ::= Language|Indent|Expand|Comment|Bracket|
               Exec|Compiler|Include|Define|Format|Navigation
    Subtag ::= имя
    Value  ::= "строка"

 -  Набор субтэгов индивидуален для каждого тэга.
 -  Все тэги и субтэги регистронезависимы.
 -  Часть субтэгов не обязательны.
 -  Если Value не содержит пробелов, то в кавычки можно не брать.
 -  Допустимо  использовать пробелы для повышения читабельности.  Например
    конструкции <Expand e To=else/> и <Expand    "e"      To  =  "else" />
    равнозначны.
 -  Длина строк Value не должна превышать  128  символов (кроме To= в тэге
    Expand - там 4096).
 -  Любые другие конструкции в угловых скобках  тихо игнорируются  и можно
    использовать  это  для  внедрения комментариев, хотя я и не рекомендую
    этого   делать  из-за  того,  что  возможно  я  таки  доделаю  парсинг
    комментариев... когда-нибудь...  Так что просьба комментировать только
    общепринятым "<!-- текст -->" способом.
 -  При обнаружении в файле конфигурации  "левых"  символов  парсинг файла
    прекращается. Можно использовать для создания заглушек, но см. выше.

    Теперь рассмотрит тэги поподробнее.

    <Language ...> ... </Language>
    ──────────────────────────────

    Этот    тэг    начинает   описание   настроек   на   конкретный   язык
программирования.  Должен  быть  первым  в  файле  конфигурации.  Все тэги
<Indent.../>, <Expand.../>, <Exec.../> и т.д.  до  <Language...>  и  после
</Language...> тихо игнорируются.
    Допустимы следующие субтэги:

    File       - список масок файлов, разделенных ",". Допустимы все,  что
                 понимает FAR. Пример: "*.[ch]pp,*.[ch]"
    ignoreCase - является ли язык регистрозависимым.  По умолчанию - 0, то
                 есть язык регистрозависим.
    BlockComment - Строка для блоков коментариев.
    Desc       - Описание языка. Пока не используется.
    Compiler   - Компилятор по умолчанию. См. ниже описание тэгов <Exec> и
                 <Compiler>.  Может быть перекрыт  явным указанием другого
                 значения в тэге <Exec>.
    CP         - Если указано ненулевое значение,  то при  создании нового
                 файла в редакторе,  для него будет установлена кодировка,
                 отличная  от  кодировки по умолчанию  (1 - OEM, 2 - ANSI,
                 3 - таблица с номером 0, N - таблица с номером (N-3)).


    <Define ... />
    ──────────────

    Этот тэг  описывает  макроподстановку для использования символического
имени вместо  его значения в значениях (Value) других  тэгов  и  субтэгов.
Набор макроподстановок  индивидуален  для каждого языка.  По умолчанию для
каждого языка  определяются  макроподстановки  &lt;, &gt;, &quot;, &amp; и
&nbsp; для совместимости с синтаксисом XML.
    Допустимы следующие субтэги:

    Name       - Символическое имя без окаймляющих '&' и ';'.
    Value      - Значение. При обнаружении в поле значения (Value) другого
                 субтэга конструкции &имя; она будет заменена на значение.

    <Indent ... />
    ──────────────

    Этот  тэг  описывает  правило  отступа  для  конкретной строки текста.
Описание  задается регулярными выражениями (Regular Expression). Синтаксис
регэкспов описан в п. 5, но для программистов достаточно сказать, что  они
реализованы на основе  Colorer  (c) Игорь Русских,  ruiv@uic.nnov.ru  и их
описание проще прочитать в соответствующем мануале.
    Тэги <Indent...> срабатывают при нажатии Enter в конце строки.
    Допустимы следующие субтэги:

    Pattern    - Регулярное выражение (regexp), описывающее строку.
    Line       - Отступ  для  текущей  строки в табуляциях.  Если параметр
                 опущен, то строка не сдвигается. Может быть положительным
                 и отрицательным.  Отступ отсчитывается от Relative или от
                 предыдущей строки, если Relative не задан.
    Next       - Отступ  для  следующей  строки.  Если параметр опущен, то
                 курсор  плагином   не   позиционируется.   Может  быть  и
                 положительным и отрицательным.  Отсчитывается  от текущей
                 строки.
    Relative   - Открывающая операторная скобка  (Open Bracket).  Например
                 "{" или "begin".   При  указании  этого  параметра  будет
                 произведен поиск соответствующей (с учетом парных) строки
                 и отступ будет отсчитан от нее.
    Imm="c"    - Признак  того,  что не нужно  ждать  нажатия  "Enter",  а
                 срабатывать по вводу символа  "c".  Подразумевается,  что
                 этот символ - последний во  введенной строке  и регэкспе.
                 Если это не так, то отступ просто не сработает.
    Start      - Перенести  по  нажатию  "Enter"  часть предыдущей строки,
                 заданную номером подвыражения (для  <Indent Pattern="r">)
                 на следующую. Сделано для переноса квотинга и более вроде
                 ни к чему не пригодно :)

    <Bracket ... />
    ───────────────

    Этот тэг описывает парные  операторные скобки  для корректной работы с
структурными отступами.  По сути дела это два тега <Indent...>, записанные
вместе.  Основным отличием использования данного тэга является возможность
установки правил отступа относительно операторных скобок (Indent Relative)
с учетом их парности.  Это позволяет, например,  поставить оператор "else"
под соответствующий ему оператор "if" с учетом скобок "{" и "}" для C/C++.
    Допустимы следующие субтэги:

    Pattern    - Регулярное выражение  (regexp),  описывающее  открывающую
                 операторную скобку.
    Match      - Регулярное выражение  (regexp),  описывающее  закрывающую
                 операторную скобку.
    Line       - Отступ  открывающей скобки  в  табуляциях.  Если параметр
                 опущен, то строка не сдвигается. Может быть положительным
                 и отрицательным.  Отступ отсчитывается от Relative или от
                 предыдущей строки, если Relative не задан.
    Shift      - Отступ следующей за скобкой строки. Если параметр опущен,
                 то принимается равным единице. Может быть и положительным
                 и отрицательным. Отсчитывается от открывающей скобки.
    Next       - Отступ следующей за закрывающей скобкой строки.
    ImmOpen    - Аналогичен <Indent Imm...> для открывающей скобки.
    ImmClose   - Аналогичен <Indent Imm...> для закрывающей скобки.
    Start      - Аналогичен <Indent Start...> для открывающей скобки.

    <Expand ... />
    ──────────────

    Этот  тэг  описывает  "темплэйт"  для  сокращенного  ввода конструкций
языков программирования. Тэги <Expand...> без субтэга Key= срабатывают при
нажатии клавиши, заданной в настройках плагина (по умолчанию - пробела).
  Проверяется соответствие  текущей строки редактора  и  образцов в списке
Expand'ов и при нахождении - замена на нужный текст.   Без субтэга Key=...
субтэг Pattern не может быть пустой строкой.
    Тэги <Expand...> с субтэгом  Key=  могут также срабатывать при нажатии
указанной в Key= клавиши.  Синтаксис описания см. ниже.  При этом проверка
образца не производится и Pattern может быть пустой строкой.
    Кроме такого "традиционного" использования плагин  можно  использовать
для создания клавиатурных макросов, срабатывающих только для определённого
типа файлов и в определённой позиции в  строке.  При  этом  тэг  может  не
порождать "видимый" результат, а просто имитировать нажатия нужных клавиш.
Например можно обрабатывать нажатие Alt-F1 при редактировании файлов C/C++
вызовом нестандартного файла помощи и т.д.
    Допустимы следующие субтэги:

    Name       - Имя "темплэйта". Если используется  этот  субтег,  теплэйт
                 попадает в меню со списком  именованых  теплейтов,  кторые
                 можно  вызвать напрямую. Именованый темплэйт так же  может
                 быть помещен в подменю (смотри ниже \~).
    SubMenu    - Если  принимает  значение  "1",  то данный  теплейт  виден
                 только в подменю темплэйтов (смотри ниже \~). По умолчанию
                 0. Имеет смысл только для именованых темплэйтов.
    Pattern    - Регулярное выражение или "строка|хвост".  Этот  тег  может
                 отсутствовать в именованом темплэйте. В этом  случае такой
                 темплэйт  можно  вызвать  через соответствующее  меню  или
                 только явно во вложенном подменю при установке SubMenu="1"
      "строка" - Минимальная строка-образец для срабатывания тэга.
      "хвост"  - Возможный необязательный "хвост" строки-образца. Например
                 при указании <Expand "х|вост"> тэг сработает на пяти воз-
                 можных образцах: "х", "хв", "хво", "хвос" и "хвост".  Эта
                 форма записи зачастую более удобна, но нужно помнить, что
                 на самом деле  "х|вост"  будет раскрыт  еще  при загрузке
                 конфигурационного файла в регэксп  "х(в(о(с(т)?)?)?)?"  и
                 избегать использования в образце "управляющих"" символов,
                 таких как скобки, обратная косая и т.д. Их нужно заменять
                 на конструкции с  обратной косой  чертой,  как и в прочих
                 регэкспах. Символ "|" не может быть частью образца.
    At         - Где должен находиться образец для срабатывания тэга.  Ре-
                 гулярное выражение с особым символом '\p', задающим поло-
                 жение курсора в строке. Для совместимости со старыми вер-
                 сиями поддерживаются следующие предопределенные значения:
                   AnyWhere - ".*\b\p.*"     - не проверять положение
                   Start    - "\p.*"         - образец в начале строки
                   Middle   - "\S.*\b\p.*\S" - образец внутри строки
                   End      - ".*\b\p"       - образец в конце строки
                   Blank    - "\p"           - строка и есть образец
                 По умолчанию - "\p" (Blank).
                 Использование '\b' в предопределенных значениях  подразу-
                 мевает, что образец является словом.  Если это не так, то
                 следует задавать  регэксп  явно.  Например следует писать
                 <Expand Pattern="\{"  At=".*\p"  To="{\n\t\p\n}"/>,  а не
                 <Expand Pattern="{"  At=End  To="{\n\t\p\n}"/>, как могло
                 бы показаться.
                 Кроме того, явное задание регэкспов может понадобится при
                 создании "автозамен", раскрываемых в любом месте, исполь-
                 зуя субтэг Imm.
    Imm="c" -    Признак того,  что не нужно ждать явной клавиши активации
                 по умолчанию, а срабатывать по вводу символа "c".
                 Подразумевается, что этот символ - последний во введенной
                 строке и регэкспе. Иначе просто не сработает. Полезно для
                 создания "автозамен",  раскрываемых в любом месте, напри-
                 мер <Expand Pattern="дум" Imm="м" At=".*\p.*" To="D00M"/>
                 или более серьёзных вещей :)
    Key        - Альтернативная клавиша срабатывания тэга.  Задаётся в том
                 виде,  в котором хранятся клавиши в клавиатурных макросах
                 FAR ("Home", "CtrlF1" и т.п.).  При задании этого субтэга
                 Pattern не анализируется и может иметь пустое значение.
    Init="1"   - Выполнить при создании  нового  файла.  Может быть только
                 один в пределах <Language...>.  При задании этого субтэга
                 Pattern не анализируется и может иметь пустое значение.
    To         - Собственно текст макроса. Обрабатываются следующие управ-
                 ляющие символы:
                   \~           - Меню (смотри ниже)
                   \"           - Кавычка (")
                   \\           - Обратная косая (\)
                   \p           - Позиция курсора после выполнения тэга
                   \n           - Enter
                   \r           - Enter (с учетом Smart Indent)
                   \t           - Tab
                   \b           - BackSpace
                   \^           - Стрелка вверх
                   \v           - Стрелка вниз
                   \<           - Стрелка влево
                   \>           - Стрелка вправо
                   \(           - Ctrl+Стрелка влево
                   \)           - Ctrl+Стрелка вправо
                   \[           - Home
                   \]           - End
                   \s           - Начать выделение блока.
                   \e           - Закончить  выделение блока.  Фактическое
                                  выделение блока произойдёт  после выпол-
                                  нения макроса.
                   \c           - Вставить содержимое буфера обмена
                   \l           - При   первой   встречи  данного  символа
                                  происходит копирование выделенного блока
                                  во  внутренний  буфер и вставка в данное
                                  место. При  повторной  встречи    данные
                                  вставляются из внутреннего буфера.
                   \ff          - Вставить полное имя редактируемого файла
                   \fp          - Вставить путь к редактируемому файлу
                   \fn          - Вставить имя редактируемого файла
                   \fe          - Вставить расширение редактируемого файла
                   \FF          - Вставить полное имя редактируемого файла
                                  (в верхнем регистре)
                   \FP          - Вставить путь к редактируемому файлу  (в
                                  верхнем регистре)
                   \FN          - Вставить  имя  редактируемого  файла  (в
                                  верхнем регистре)
                   \FE          - Вставить расширение редактируемого файла
                                  (в верхнем регистре)
                   \FX          - Вставить имя и расширение редактируемого
                                  файла (в верхнем регистре)
                   \Es          - Вставить текущую строку редактора
                   \Ep          - Вставить номер текущей строки  редактора
                   \Ec          - Вставить  позицию   в   текущей   строке
                                  редактора
                   \u           - Вставить имя текущего пользователя.
                   \i'filename' - Вставить содержимое из файла.
                                  Внутри  команды  действуют   управляющие
                                  символы \\, \\'.  Однако если после \ не
                                  было встречено ', то это будет интерпри-
                                  тировано как просто \.
                   \o'command'  - Вставить вывод запуска команды  command.
                                  Внутри  команды  действуют   управляющие
                                  символы \\, \\'.  Однако если после \ не
                                  было встречено ', то это будет интерпри-
                                  тировано как просто \.
                                  Например \o'cmd /c dir'
                   \d['формат'] - Вставить дату.  Формат строки аналогичен
                                  функции GetDateFormat за исключением то-
                                  го, что  вместо  апострофов используются
                                  символы '`' (обратный апостроф).
                                  Для вставки ':' используется '\:'
                   \w['формат'] - Вставить время. Формат строки аналогичен
                                  функции GetTimeFormat за исключением то-
                                  го, что  вместо  апострофов используются
                                  символы '`' (обратный апостроф).
                                  Для вставки ':' используется '\:'
                   \ч           - ч=[0-9] вставка параметра (см. ниже).
                   \$ч          - ч=[0-9]  вставка  подвыражения   (субтэг
                                  "Pattern" должен быть регулярным выраже-
                                  нием).
                   \?'строка'?  - Заголовок строки ввода параметра.
                   \!<символ>   - Обработать <символ>, как нажатие клавиши
                                  с учетом макроподстановок.
                   \{key}       - Произвольная клавиша. Синтаксис такой же
                                  как в субтэге Key="key".
                 Любой другой "\<символ>" обрабатывается как '\!<символ>'.

    Конструкции \0-\9 обрабатываются  следующим  образом.  Все  параметры,
упомянутые  в макросе,  запрашиваются у пользователя  в  общем  диалоговом
окне. Метка строки ввода каждого параметра берется из значения \?'строка'?
которое было активно на момент первого вхождения \ч.  Например конструкция

    <Expand
     Pattern="test"
     To="\?'type'e'int'?\?'name'e'func'?\?'param(s)'e'int x, int y'?\0 \1(\2)\n{\n}\^\rreturn (\0)0;\^\r"
    />

выведет окно ввода параметров:

    ╔════════ Параметры ════════╗
    ║ type      int            ║
    ║ name      func           ║
    ║ param(s)  int x, int y   ║
    ║    [ OK ]  [ Отмена ]     ║
    ╚═══════════════════════════╝

и, после ввода указанных значений, построит следующий фрагмент текста:

int func(int x, int y)
{
  _
  return (int)0;
}

    Элементы управления могут быть различные. Более подробную информацию о них
можно узнать в разделе 6.

    Подчеркиванием  обозначено положение курсора.  Порядок  строк  ввода в
окне определяется  номером параметра  и  не зависит  от порядка следования
управляющих символов \ч.
    Конструкция  \ч'строка'  присваивает  значение  параметру  с указанным
номером.  Использовать осторожно, не забывая о том, что если это вхождение
параметра  -  первое,  то  'строка' будет открыта на редактирование в окне
диалога,  а  если  не  первое,  то  просто  будет  выполнено  присваивание
параметру.

    Если строка начинается с \~,  то пользователю будет предложен выбор из
меню, каждый пункт которого должен начинаться с \~ и записываться в виде:

    строка[=описание]

    После выбора из меню "строка" обрабатывается так, как если бы она была
введена с клавиатуры и нажата клавиша активации шаблона (пробел). Например
для  C/C++  неоднозначность выбора между  switch и struct  при образце "s"
может быть раскрыта следующим образом:

  <Expand Pattern="st|ruct" To="struct \p\n{\n}"/>
  <Expand Pattern="sw|itch" To="switch ( \p )\n{\n}\^\rcase :"/>
  <Expand Pattern="s"       To="\~switch=switch () {}\~struct=struct {}"/>

    Дополнительно в меню можно использовать специальные символы \\, \= для
обозначения '\' и '=' соответственно.  Другие символы вида  \x  (кроме \~)
воспринимаются как x.

    При  нахождении  первого  подходящего  образца поиск прекращается. Все
эти "сложности" позволяют иметь различную реакцию на ввод одного образца в
разных контекстах. Например:

  <Expand Pattern="r|eturn" At=End     To="return \p;"/>
  <Expand Pattern="r|eturn" At="\p.*;" To="return \]"/>
  <Expand Pattern="r|eturn" At=Start   To="return \];"/>

    При  вводе  образца  в начале строки макрос будет вести себя иначе чем
в конце или на пустой строке.

    <Comment ... />
    ───────────────

    Этот тэг описывает участки текста в которых  запрещена работа плагина.
Тэг необходим для того,  чтобы  макросы и отступы  не срабатывали  внутри
строковых констант и комментариев.
    Допустимы следующие субтэги:

    Pattern    - Регулярное выражение (regexp), описывающее часть строки в
                 которой запрещена работа плагина.

    <Exec ... />
    ─────────────────────────────────────────────────────────────────────

    Этот тэг описывает внешнюю команду для данного типа файла. Таких тэгов
может быть несколько.  Тэг предназначен для поддержки вызова  компиляторов
и внешних утилит обработки файлов.
    Допустимы следующие субтэги:

    Command    - Команда операционной системы. Допустимы следующие макросы
                 (регистрозависимые):

                 Макросы:
                   =M       - диск
                   =[do]N   - имя
                   =[do]E   - расширение
                   =[do]F   - имя.расширение
                   =[dmot]D - папка
                   =[dmo]P  - полное имя
                   ='       - "интеллектуальные" кавычки
                   =0 - =9  - запрос параметра
                   =?       - заголовок запроса параметра

                 Интеллектуальность "интеллектуальных" кавычек заключается
                 в том, что они будут вставлены в текст команды только при
                 условии, что между ними есть хоть один пробел.

                 Правила  обработки  =0 - =9  и  =?  полностью  аналогичны
                 обработке \0 - \9 и \? в субтэге <Expand To=.../>.

                 Модификаторы макросов:
                   d - короткое значение
                   m - нет буквы диска
                   o - не заключать в кавычки
                   t - нет '\' на конце

    Save       - Сохранить перед выполнением команды:
                   "Current" - Редактируемый файл.
                   "All"     - Все открытые файлы.
                   "None"    - Ничего не сохранять.
    CD         - Сделать текущим каталог:
                   "Base"    - "Базового" файла (см. ниже).
                   "File"    - Редактируемого файла.
                   "None"    - Не менять каталог.
    Jump       - Как обрабатывать листинг компилятора:
                   "Menu"    - Листинг в виде меню.
                   "First"   - Перейти на первую найденную ошибку.
                   "Smart"   - Листинг (Menu)  или  переход (First),  если
                               ошибка только одна (по умолчанию).
                   "None"    - Никак не обрабатывать (смотреть по Ctrl-O).
    Enable     - Выполнить  команду  только  если  существует  этот  файл.
                 Допустимы макросы. Значение используется также в качестве
                 "Базового" файла в субтэге CD. Если маска файла начинает-
                 ся с "*\", то "базовый" файл ищется не только  в  текущем
                 каталоге, но и в каталогах всех открытых файлов.  Исполь-
                 зуется первый найденный.
    Disable    - Выполнить  команду  только  если этот файл не существует.
    Compiler   - Имя компилятора из тэга <Compiler> (См. ниже). Опеределя-
                 ет правила анализа листинга внешней программы.  Допустимо
                 указание списка значений, разделенных запятыми.
    Echo       - Вывод сообщений компилятора  на  экран  для  последующего
                 просмотра по Ctrl-O.

    <Compiler ... />
    ───────────────────────────────────────────────────

    Этот тэг описывает правила анализа листинга  внешней программы.  Таких
тэгов может быть несколько. Тэг используется совместно с тэгом <Exec>.
    Допустимы следующие субтэги:

    Name       - Имя компилятора. Символы  ','  недопустимы.  Используется
                 для ссылок на это правило из тэгов <Exec>.
    Error      - Регулярное выражение,  описывающее строку с сообщением об
                 ошибке в листинге компилятора.
    Line       - Номер подвыражения из субтэга Error с  номером  ошибочной
                 строки.
    Col        - Номер подвыражения из субтэга Error с  номером ошибочного
                 столбца или строки для поиска в форме "?n", где n - номер
                 подвыражения содержащего строку для поиска.
    File       - Номер подвыражения из субтэга Error с именем файла.  Если
                 не указано, то принимается равным =F.

    <Include ... />
    ────────────────────

    Этот тэг описывает включение  дополнительного файла настройки.  Введен
для возможности разбить настройки для разных языков по разным файлам и для
возможности вынести общие настройки для нескольких языков в один файл.
    Допустимы следующие субтэги:

    File       - Имя подключаемого файла. При указании относительного пути
                 текущей папкой считается каталог плагина.

    <Format ... />
    ────────────────────

    Этот  тэг  описывает  комманду  автоматического  форматирования   исходных
текстов.  При  выборе  соответствующий  опции  в  меню  можно  отформатировать
открытый  файл  целиком  или  отдельно   выделенную   область   (вертикальную,
горизонтальную).

    Допустимы следующие субтэги:

    Name - Имя команды форматирования. Если команд  несколько,  пользователю
           будет предложен выбор в виде меню.
    Command  -   команда   запуска   внешней   утилиты   для   форматирования.
                 Поддерживаются седующие спецсимволы:
                 =S - имя исходного файла (%TEMP%\true-template-src.tmp)
                 =D - имя файла-результата (%TEMP%\true-template-dst.tmp)
                 =0 - =9  - вставка параметра
                 =?       - запрос параметра

                 Правила  обработки  =0 - =9  и  =?  полностью  аналогичны
                 обработке \0 - \9 и \? в субтэге <Expand To=.../>.
    Echo - Вывод сообщений компилятора  на  экран  для  последующего
           просмотра по Ctrl-O.

    <Navigation ... />
    ────────────────────

    Этот тэг описывает формат ссылки по которой можно  осуществить  навигацию.
Навигация осуществляется путем поиска файлов на диске. В качестве имени  файла
для поиска из текущей строки в редакторе извлекается подстрока по маске в виде
регулярного  выражения.  Эта  подстрока  и  есть  имя  файла  для   поиска   и
последующего перехода к нему. При выборе пункта меню для навигации, она  может
осуществляться для выделенного участка текста. В этом случае  поиск  по  маске
производиться не будет.

    Допустимы следующие субтэги:

    Mask - задает регулярное выражение для  поиска  соответствующей  подстроки
           (ссылки для навигации).
    Pos  - номер  скобки  в  регулярном  выражении  Mask,  содержимое  которой
           является имя файла для поиска.
    Path - путь  для  поиска  файла  по  ссылке  (может  содержать  переменные
           окружения и текущую директорию).
   Suffixes - дополнительный суффиксы, которые подставляются к концу  найденой
              ссылки для расшерения круга поиска.
   Rect - координаты прямоугольника открываемого окна редактора  (вьювера)  по
          ссылке (задаются в процентах от полного размера FAR'а).
   Viewer - флаг открытия вьвера вместо редактора.

             ┌──────────────────────────────────────────────┐
             │         5. Вставка шаблонов из файлов        │
             └──────────────────────────────────────────────┘

    С версии 2.00 в плагине появилась возможность вставки шаблонов из  файлов.
В них  могут  присутсвовать  строки  подстановки.  Формат  строки  подстановки
следующий:

        @@название_строки_подстановки[:параметр1[:параметр2..]]@@

    В случае отсутсвия строки подстановки описанного формата,  подстановка  не
произойдет (строка останется в изначальном виде).
    В связи с принятым синтаксисом существует следующая особенность:

 -  при необходимости написания двоеточия внутри строки  подстановки (значение
    параметра), используется конструкция "\:" вместо ":".

    В текущей версии доступны следующие строки подстановки (по типам):

    Вставка параметров  (ARG)
    -------------------------

    Синтаксис: @@ARGчисло@@, где число - номер параметра (от 0 до 9).

    Производится вставка параметра вместо строки подстановки. Если параметр не
был объявлен,то соответствующая строка подстановки просто будет удалена.

    Вставка содержимого буффера обмена (CLIP)
    -----------------------------------------

    Синтаксис: @@CLIP@@

    Пользовательский ввод (INPUT, INPUTSTR)
    ---------------------------------------

    Синтаксис: @@INPUT:заголовок[:начальное_значение[:строка_пользователя]]@@,
               @@INPUTSTR:строка_пользователя:заголовок[:начальное_значение]@@,

    где           заголовок -  заголовок диалога ввода;
         начальное_значение -  начальное значение в диалоге ввода;
        строка_пользователя -  см. описание "STR".

    При использовании строки подстановки "INPUT" происходит вставка введенного
текста в место вызова строки подстановки, при ее написании  в  полном  формате
произойдет  также  присвоение   значения   строке   пользователя.   В   случае
использования "INPUTSTR" происходит присвоение  значения  строке  пользователя
без его вставки в текст.  Использовать  введенное  значение  можно  с  помощью
строки подстановки "STR" (см. ниже).

    Установка позиции курсора (HERE)
    --------------------------------

    Синтаксис: @@HERE@@

    Производится установка текущей позиции курсора после  вставки  шаблона  из
файла. При наличии нескольких таких строк подстановки,  срабатывает  последняя
встреченная в файле.

    Вставка времени и даты (DATE, TIME, DATETIME)
    ---------------------------------------------

    Синтаксис: @@DATE[:строка_формата]@@,
               @@TIME[:строка_формата]@@,
               @@DATETIME[:строка_формата]@@,

    где строка_формата -  формат вывода даты и/или времени (см.тестовый пример
                          или в MSDN параметры GetDateFormat и GetTimeFormat).

    Производится вставка текущей даты ("DATE"), времени ("TIME") или и того  и
другого ("DATETIME").  При  использовании  в  строке  формата  двоеточия,  его
следует записывать как \: в связи с упомянутой особенностю синтаксиса.

    Вставка различной системной информации (COMP_NAME, USER_NAME, OS_NAME etc)
    --------------------------------------------------------------------------

    Синтаксис: @@COMP_NAME@@
               @@USER_NAME@@
               @@OS_NAME@@
               @@OS_TYPE@@
               @@ENV:имя_переменной_окружения@@
               @@TICKS@@

    Производится  вставка  имени  компьютера   ("COMP_NAME"),   имя   текущего
пользователя  ("USER_NAME"),  имя,  названия  и  версии  операционной  системы
("OS_NAME"),  типа  операционной  системы  ("OS_TYPE"),   значения   указанной
переменной  окружения  ("ENV"),  количество  милисекунд  со  времени  загрузки
системы ("TICKS").

    Вставка пути, имени и расширения файла (FILE_xxx и UPPERFILE_xxx)
    -----------------------------------------------------------------

    Синтаксис: @@[UPPER]FILE_PATH_NAME@@
               @@[UPPER]FILE_PATH@@
               @@[UPPER]FILE_NAME@@
               @@[UPPER]FILE_EXT@@
               @@[UPPER]FILE_NAME_EXT@@

    Вышеназванными строками подстановки  производится  вставка  полного  имени
файла  ("FILE_PATH_NAME"),  пути  к  файлу  ("FILE_PATH"),  имени  файла   без
расширения  ("FILE_NAME"),  расширения  файла  ("FILE_EXT"),  имени  файла   с
расширением ("FILE_NAME_EXT"). При использования префикса "UPPER" происходит
вставка соответсвующей строки в верхнем регистре.

    Счетчики (CNT, INC, DEC)
    ------------------------

    Синтаксис: @@CNT:имя_счетчика[:начальное_значение]@@
               @@DEC:имя_счетчика[:шаг_декремента]@@
               @@INC:имя_счетчика[:шаг_инкремента]@@

    В шаблонах существует возможность использования  целочисельных  счетчиков.
Значения счетчиков сохраняются в INI файле. С помощью строки подстановки "CNT"
осуществляется вставка счетчика с заданным именем. При  использовании  полного
синтаксиса, возможно задание начального  значения  счетчиков.  Также  возможна
вставка инкрементированого или декрементированого значения счетчика, на 1  или
с заданным шагом ("INC" и "DEC").

    Строки пользователя (STR)
    -------------------------

    Синтаксис: @@STR:строка_пользователя[:[новое_значение]]@@

    В шаблонах также можна использовать строки пользователя, значение  которых
сохраняется до следующего использования в INI файле. При использовании  строки
подстановки "STR" только с именем строки пользователя происходит  ее  вставка.
Также можно задать новое значение строки пользователя через второй  парааметр.
Если  опустить  значение  второго  параметра  но  оставить   разделитель,   то
произойдет очистка строки пользователя.
    Значение строки пользователя можно также  задать  интерактивно  с  помощью
строк подстановки пользовательського ввода "INPUT" и "INPUTSTR" (см.выше).

    Выделение (SELECTED)
    --------------------

    Синтаксис: @@SELECTED@@

    При  первой  встречи  данной  строки  подстановки   происходит   вырезание
выделения во внутренний буфер и вставка в данное место. При повторной  встречи
происходит вставка из внутренного буффера.

    Вставка сгенерированой информации (GUID, RAND)
    ----------------------------------------------

    Синтаксис: @@GUID@@
               @@RAND@@

    Происходит генерация  и  вставка  глобального  уникального  идентификатора
("GUID") или псевдослучайного положительного целочисельного числа ("RAND")

    Вставка файла или шаблона (INCLUDE)
    -----------------------------------
    Синтаксис: @@INCLUDE:имя_файла@@


    Выполнение программы или внутренней комманды со вставкой вывода (EXEC)
    ----------------------------------------------------------------------
    Синтаксис: @@EXEC:комманда@@

    Вставка данных из редактора (EDITOR_STRING, EDITOR_POS, EDITOR_COL)
    ----------------------------------------------------------------------
    Синтаксис: @@EDITOR_STRING@@
               @@EDITOR_POS@@
               @@EDITOR_COL@@

    Вставка текущей строки редактора - EDITOR_STRING
    Вставка номера текущей строки редактора - EDITOR_POS
    Вставка позиции в текущей строке редактора - EDITOR_COL

             ┌──────────────────────────────────────────────┐
             │       5. Известные ошибки и недоработки      │
             └──────────────────────────────────────────────┘

 -  При "Save as..." с изменением расширения файла не производится переоп-
    ределение типа файла. Это не баг, это фича :)
 -  При парсинге файла конфигурации плагин не выдаёт никаких диагностичес-
    ких сообщений. Неверные строки просто игнорируются. Баг или фича?
 -  Рекурсия <Include .../> не проверяется.  Считается, что пользователь в
    здравом уме такого не допустит :)
 -  При выполнении внешних программ под  Windows 9x/ME не всегда корректно
    работает перехват вывода.  Например при невозможности скопировать файл
    поверх файла, занятого другим процессом,  сообщение OS до пользователя
    не доходит и создаётся впечатление "зависания". Если кто-нибудь знает,
    как с этим бороться, то буду признателен за "рецепт".
 -  При компиляции проектов в каталоге (или подкаталогах)  плагина, проис-
    ходит аварийное завершение работы программы.

             ┌──────────────────────────────────────────────┐
             │    6. Поддерживаемые элементы управления     │
             └──────────────────────────────────────────────┘

    В строках некоторых тегов могут использоваться  пользовательские  элементы
управления. Логика работы этих  элементов  следующая.  Строка  просматривается
полностью и из нее выбираются конструкции между символами  '?'  (\?  или  =?).
Из  них  строиться  диалоговое  окно  запроса  параметров.  После   того   как
пользователь введет параметры в этом  окне,  эти  значения  будут  доступны  с
помощью спецсимволов \0 - \9 или =0 - =9.
Виды элементов управления:
  1) Статический текст
     Формат - \?'Static text'?
  2) Чекбокс (+ элемент выбран, - элемент не выбран)
     Формат - \?'Name'x'On value'+'Off value'?
  3) Комбобокс (+ элемент активен, - элемент не активен; активным может быть только 1 элемент)
     Формат - \?'Name:'c-'Item 1'+'Item item 2'-'Item item 3'?
  4) Выпадающее меню (+ элемент активен, - элемент не активен; активным может быть только 1 элемент)
     Формат - \?'Name:'d-'Item 1 name':'Item 1: On value':'Item 1: Off value'+'Item 2 name':'Item 2: On value':'Item 2: Off value'-'Item 2 name':'Item 2: On value':'Item 2: Off value'?
  5) Поле ввода
     Формат - \?'Name:'e'init value'?
  6) Фиксированное поле ввода (после начального значения указывается фиксированная длинна поля)
     Формат - \?'Name:'f'AB':'2'?
  7) Листбокс (+ элемент активен, - элемент не активен; активным может быть только 1 элемент)
     Формат - \?'Name:'l-'Item 1 name':'Item 1: On value':'Item 1: Off value'+'Item 2 name':'Item 2: On value':'Item 2: Off value'-'Item 2 name':'Item 2: On value':'Item 2: Off value'?
  8) Группа радио элементов (+ элемент активен, - элемент не активен; активным может быть только 1 элемент)
     Формат - \?'Name:'r-'Item 1 name':'Item 1: On value':'Item 1: Off value'+'Item 2 name':'Item 2: On value':'Item 2: Off value'-'Item 2 name':'Item 2: On value':'Item 2: Off value'?

             ┌──────────────────────────────────────────────┐
             │       7. Синтаксис регулярных выражений      │
             └──────────────────────────────────────────────┘

    Описание синтаксиса регулярных выражений можно (и нужно)  посмотреть в
документации к библиотеке Colorer (c) Игорь Русских, ruiv@uic.nnov.ru.

    Указывать символы "/" в начале и конце регекспа нет необходимости.
    Указывать  символы  "^"  и  "$"  явно также нет  необходимости  -  они
подразумеваются  плагином  в  начале  и  конце  строки везде кроме <Indent
Start="r"> и <Comment Pattern="r">. Кроме того в <Expand Pattern="r"> под-
разумеваются начальные и конечные необязательные пробельные символы.

             ┌──────────────────────────────────────────────┐
             │  8. Распространение и ответственность сторон │
             └──────────────────────────────────────────────┘

    Условия  распространения:  FREEWARE. Исходники распространяются вместе
с ним, смотрите на здоровье. При доработках давайте знать мне, я тоже хочу
:)
    Если вы написали  свою  схему темплэйтов  или доработали существующую,
добавили  поддержку  нового  компилятора  и  т.д.,  пожалуйста  присылайте
свои наработки  мне  на  mailto:corwinnt@mail.ru  или  Fidonet: 2:464/991.
Возможно они будут включены в стандартную поставку.
    Автор  не  несет  никакой  ответственности  за последствия пользования
данным  продуктом,  хотя  при  тестировании  ничего  особо страшного в нем
обнаружено не было :)

             ┌──────────────────────────────────────────────┐
             │              9. Благодарности                │
             └──────────────────────────────────────────────┘

    Андрею Третьякову, 2:5085/40    - За исходные тексты True-CPP plugin и
                                      за ряд идей,  пришедших  в  голову в
                                      ходе переписки.

    Евгению Рошалу, 2:5010/45.7     - За прекрасный файлменеджер, позволя-
                                      ющий реализовать практически все, за
                                      исключением невозможного.

    Олегу Данилову,dov@sparc.spb.su - За поиск и фикс ряда багов.

    Игорю Русских, ruiv@uic.nnov.ru - За прекрасную библиотеку регэкспов.

             ┌──────────────────────────────────────────────┐
             │                 10. Контакты                 │
             └──────────────────────────────────────────────┘

    По всем вопросом работы плагина обращайтесь на форуме в соответствующую
ветку: http://forum.farmanager.com/viewtopic.php?f=5&t=176
